<?php
/**
 * @file
 * Goodman Planning Tool Module.
 *
 * This module extends the achievements module and provides a badge that prototypes
 * some badging principles for the iAcademy project.
 */

/**
* Implements hook_permission().
*/
function goodman_planning_tool_permission() {
  $permission = array(
    'access planning tool' => array(
      'title' => t('Access planning tool'),
      'description' => t('Allow users to access the goodman planning tool'),
    ),
  );
  
  return $permission;
}

/**
 * Implements hook_menu().
 */
function goodman_planning_tool_menu() {
  $items = array(
    'program-planning-tool' => array(
      'title' =>          'Program Planning Tool',
      'description' =>    'Goodman Initiative Program Planning Tool.',
      'page callback' =>  'goodman_planning_tool_page',
      'file' =>           'goodman_planning_tool.pages.inc',
      'menu_name'       => 'main-menu',
      'access arguments' => array('access planning tool'),
      'type' => MENU_NORMAL_ITEM,
    ),
    'program-planning-tool/step-1' => array(
      'title' => 'Step One: Choose a Thematic Approach',
      'description' => 'Page for Goodman Initiative Program Planning Tool.',
      'page callback' => 'goodman_planning_tool_step1_page',
      'file' => 'goodman_planning_tool.pages.inc',
      'access arguments' => array('access planning tool'),
    ),
    'program-planning-tool/step-1/to-prepare' => array(
      'title' => 'To Prepare',
      'description' => 'Page for Goodman Initiative Program Planning Tool.',
      'page callback' => 'goodman_planning_tool_step1_prepare_page',
      'file' => 'goodman_planning_tool.pages.inc',
      'access arguments' => array('access planning tool'),
    ),    
    'program-planning-tool/step-1/to-consider' => array(
      'title' => 'To Consider',
      'description' => 'Page for Goodman Initiative Program Planning Tool.',
      'page callback' => 'goodman_planning_tool_step1_consider_page',
      'file' => 'goodman_planning_tool.pages.inc',
      'access arguments' => array('access planning tool'),
    ),
    'program-planning-tool/step-1/moving-forward' => array(
      'title' => 'Moving Forward',
      'description' => 'Page for Goodman Initiative Program Planning Tool.',
      'page callback' => 'goodman_planning_tool_step1_forward_page',
      'file' => 'goodman_planning_tool.pages.inc',
      'access arguments' => array('access planning tool'),
    ),
    'program-planning-tool/step-2' => array(
      'title' => 'Step Two: Identify Settings and Resources',
      'description' => 'Page for Goodman Initiative Program Planning Tool.',
      'page callback' => 'goodman_planning_tool_step2_page',
      'file' => 'goodman_planning_tool.pages.inc',
      'access arguments' => array('access planning tool'),
    ),
    'program-planning-tool/step-2/to-prepare' => array(
      'title' => 'To Prepare',
      'description' => 'Page for Goodman Initiative Program Planning Tool.',
      'page callback' => 'goodman_planning_tool_step2_prepare_page',
      'file' => 'goodman_planning_tool.pages.inc',
      'access arguments' => array('access planning tool'),
    ),    
    'program-planning-tool/step-2/to-consider' => array(
      'title' => 'To Consider',
      'description' => 'Page for Goodman Initiative Program Planning Tool.',
      'page callback' => 'goodman_planning_tool_step2_consider_page',
      'file' => 'goodman_planning_tool.pages.inc',
      'access arguments' => array('access planning tool'),
    ),
    'program-planning-tool/step-2/moving-forward' => array(
      'title' => 'Moving Forward',
      'description' => 'Page for Goodman Initiative Program Planning Tool.',
      'page callback' => 'goodman_planning_tool_step2_forward_page',
      'file' => 'goodman_planning_tool.pages.inc',
      'access arguments' => array('access planning tool'),
    ),
    'program-planning-tool/step-3' => array(
      'title' => 'Step Three: Define Your Audience',
      'description' => 'Page for Goodman Initiative Program Planning Tool.',
      'page callback' => 'goodman_planning_tool_step3_page',
      'file' => 'goodman_planning_tool.pages.inc',
      'access callback' => TRUE,
    ),
    'program-planning-tool/step-3/to-prepare' => array(
      'title' => 'To Prepare',
      'description' => 'Page for Goodman Initiative Program Planning Tool.',
      'page callback' => 'goodman_planning_tool_step3_prepare_page',
      'file' => 'goodman_planning_tool.pages.inc',
      'access callback' => TRUE,
    ),    
    'program-planning-tool/step-3/to-consider' => array(
      'title' => 'To Consider',
      'description' => 'Page for Goodman Initiative Program Planning Tool.',
      'page callback' => 'goodman_planning_tool_step3_consider_page',
      'file' => 'goodman_planning_tool.pages.inc',
      'access arguments' => array('access planning tool'),
    ),
    'program-planning-tool/step-3/moving-forward' => array(
      'title' => 'Moving Forward',
      'description' => 'Page for Goodman Initiative Program Planning Tool.',
      'page callback' => 'goodman_planning_tool_step3_forward_page',
      'file' => 'goodman_planning_tool.pages.inc',
      'access arguments' => array('access planning tool'),
    ),    
    'program-planning-tool/step-4' => array(
      'title' => 'Step Four: Select Programs & Manage Scope',
      'description' => 'Page for Goodman Initiative Program Planning Tool.',
      'page callback' => 'goodman_planning_tool_step4_page',
      'file' => 'goodman_planning_tool.pages.inc',
      'access arguments' => array('access planning tool'),
    ),
    'program-planning-tool/step-4/to-prepare' => array(
      'title' => 'To Prepare',
      'description' => 'Page for Goodman Initiative Program Planning Tool.',
      'page callback' => 'goodman_planning_tool_step4_prepare_page',
      'file' => 'goodman_planning_tool.pages.inc',
      'access arguments' => array('access planning tool'),
    ),    
    'program-planning-tool/step-4/to-consider' => array(
      'title' => 'To Consider',
      'description' => 'Page for Goodman Initiative Program Planning Tool.',
      'page callback' => 'goodman_planning_tool_step4_consider_page',
      'file' => 'goodman_planning_tool.pages.inc',
      'access arguments' => array('access planning tool'),
    ),
    'program-planning-tool/step-4/moving-forward' => array(
      'title' => 'Moving Forward',
      'description' => 'Page for Goodman Initiative Program Planning Tool.',
      'page callback' => 'goodman_planning_tool_step4_forward_page',
      'file' => 'goodman_planning_tool.pages.inc',
      'access arguments' => array('access planning tool'),
    ),
    'user/%user/planning-tool' => array(
      'access callback'  => goodman_planning_tool_user_page_access,
      'description'       => "View a specific user's Planning Tool answers.",
      'file'              => 'goodman_planning_tool.pages.inc',
      'page callback'     => 'goodman_planning_tool_user_page',
      'page arguments'    => array(1),
      'title'             => 'Planning Tool',
      'type'              => MENU_LOCAL_TASK,
    ),
  );
  return $items;
}
function goodman_planning_tool_user_page_access() {
  global $user;
  if (arg(0) == 'user' && $user->uid == arg(1) || in_array('faculty', array_values($user->roles))){
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_achievements_info().
 */
function goodman_planning_tool_achievements_info() {
  $achievements = array(
    'planning-tool' => array(
      'title' => t('Planning Tool'),
      'achievements' => array(
        'step-1' => array(
          'title' => t('Completed Step One'),
          'description' => t("Choosing a Thematic Approach"),
          'storage' => 'planning-tool',
          'points' => 10,
          'images' => array(
            'unlocked'  => drupal_get_path('module', 'goodman_planning_tool') . '/images/goodman-unlocked.png',
            'locked'    => drupal_get_path('module', 'goodman_planning_tool') . '/images/goodman-locked.png',
          ),          
        ),
        'step-2' => array(
          'title' => t('Completed Step Two'),
          'description' => t("Identifying Settings and Resources"),
          'storage' => 'planning-tool',
          'points' => 10,
          'images' => array(
            'unlocked'  => drupal_get_path('module', 'goodman_planning_tool') . '/images/goodman-unlocked.png',
            'locked'    => drupal_get_path('module', 'goodman_planning_tool') . '/images/goodman-locked.png',
          ),
        ),
        'step-3' => array(
          'title' => t('Completed Step Three'),
          'description' => t("Defining Your Audience"),
          'storage' => 'planning-tool',
          'points' => 10,
          'images' => array(
            'unlocked'  => drupal_get_path('module', 'goodman_planning_tool') . '/images/goodman-unlocked.png',
            'locked'    => drupal_get_path('module', 'goodman_planning_tool') . '/images/goodman-locked.png',
          ),
        ),
        'step-4' => array(
          'title' => t('Completed Step Four'),
          'description' => t("Choosing Programs & Managing Scope"),
          'storage' => 'planning-tool',
          'points' => 10,
          'images' => array(
            'unlocked'  => drupal_get_path('module', 'goodman_planning_tool') . '/images/goodman-unlocked.png',
            'locked'    => drupal_get_path('module', 'goodman_planning_tool') . '/images/goodman-locked.png',
          ),          
        ),
        'complete' => array(
          'title' => t('Completed Planning Tool'),
          'description' => t("Ready to program!"),
          'storage' => 'planning-tool',
          'points' => 0,
          'images' => array(
            'unlocked'  => drupal_get_path('module', 'goodman_planning_tool') . '/images/goodman-unlocked.png',
            'locked'    => drupal_get_path('module', 'goodman_planning_tool') . '/images/goodman-locked.png',
          ),          
        ),
      ),
    ),
  );
  return $achievements;
}

function goodman_planning_tool_step1_form($form, $form_state) {
  global $user; //Get the current user.

  $query_select = db_select('gpt') //Query the database to see of the user has a record.
  ->fields('gpt')
  ->condition('uid', $user->uid, '=')
  ->execute()
  ->fetchAssoc();
    
  if (!$query_select) { //insert record if one does not exist.
    $query_insert = db_insert('gpt')
    ->fields(array('uid'))
    ->values(array(
      'uid' => $user->uid )
    )
    ->execute();
  }

  $form = array();
  
  // fetch the taxonomy terms inside the themes vocabulary
  //$taxonomyQuery = new EntityFieldQuery();
  //$taxonomyTerms = $taxonomyQuery->entityCondition('entity_type', 'taxonomy_term')
  //  ->propertyCondition('vid', 7) //change 2 to any vocabulary ID
  //  ->propertyOrderBy('weight')
  //  ->execute();
  //foreach($taxonomyTerms['taxonomy_term'] as $term) {
  //  $relevantTerms[] = $term->tid;
  //}

  // $relevantTerms will now have the terms of your target vocabulary
  $form['question-1'] = array(
    '#type' => 'checkboxes',
    '#title' => t('We have chosen the following theme(s) for this summer at
      camp'),
    '#options' => drupal_map_assoc(
      array(
      'A Land & Its People',
      'The Pioneering Spirit',
      'A People\'s Hope',
      'Creation & Rebirth',
      'Dreams & Realities'
      )
    ),
    '#default_value' => $query_select['step1_q1'],    

  );
  $form['question-2'] = array(
    '#type' => 'textarea',
    '#title' => t('We chose this theme because:'),
    '#required' => TRUE,
    '#default_value' => $query_select['step1_q2'],
  );
  $form['question-3'] = array(
    '#type' => 'textarea',
    '#title' => t('We already do programming at camp around a theme like this
      in the following ways:'),
    '#required' => TRUE,
    '#default_value' => $query_select['step1_q3'],
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  return $form;
}

function goodman_planning_tool_step1_form_submit($form, &$form_state) {
   global $user;
   
  //even though acheivement_unlocks checks, we need to check so that
  //storage is not invoked
  if (!achievements_unlocked_already('step-1', $user->uid)) {
    //assign the badge-specific points
    $current_count = achievements_storage_get('planning-tool', $user->uid) + 10;
    achievements_storage_set('planning-tool', $current_count, $user->uid);
    
    achievements_unlocked('step-1', $user->uid); //unlock the achivement
  }
  
  $curric_themes = addslashes(implode (", ", $form_state['values']['question-1']));
  
  $query = db_update('gpt')
  ->fields(array(
    'step1_q1' => $curric_themes,
    'step1_q2' => $form_state['values']['question-2'],
    'step1_q3' => $form_state['values']['question-3'],
  ))
  ->condition('uid', $user->uid, '=')
  ->execute();
  
  $form_state['redirect'] = 'program-planning-tool';
}

function goodman_planning_tool_step2_form($form, $form_state) {
  global $user; //Get the current user.

  $query_select = db_select('gpt') //Query the database to see of the user has a record.
  ->fields('gpt')
  ->condition('uid', $user->uid, '=')
  ->execute()
  ->fetchAssoc();  
  
  if (!$query_select) { //insert record if one does not exist.
    $query_insert = db_insert('gpt')
    ->fields(array('uid'))
    ->values(array(
      'uid' => $user->uid )
    )
    ->execute();
  }
  
  $form = array();
  
  $form['question-1'] = array(
    '#type' => 'textarea',
    '#title' => t('Israel exists very strongly in these areas at camp:'),
    '#required' => TRUE,
    '#default_value' => $query_select['step2_q1'],
  );
  $form['question-2'] = array(
    '#type' => 'textarea',
    '#title' => t('These areas are "fertile ground" for developing Israel
      programs:'),
    '#required' => TRUE,
    '#default_value' => $query_select['step2_q2'],
  );
  $form['question-3'] = array(
    '#type' => 'textarea',
    '#title' => t('We plan to develop or enhance programming in the following
      areas this summer:'),
    '#required' => TRUE,
    '#default_value' => $query_select['step2_q3'],
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  return $form;
}

function goodman_planning_tool_step2_form_submit($form, &$form_state) {
   global $user;
   
  //even though acheivement_unlocks checks, we need to check so that
  //storage is not invoked
  if (!achievements_unlocked_already('step-2', $user->uid)) {
    //assign the badge-specific points
    $current_count = achievements_storage_get('planning-tool', $user->uid) + 10;
    achievements_storage_set('planning-tool', $current_count, $user->uid);
    
    achievements_unlocked('step-2', $user->uid); //unlock the achivement
  }

  $query = db_update('gpt')
  ->fields(array(
    'step2_q1' => $form_state['values']['question-1'],
    'step2_q2' => $form_state['values']['question-2'],
    'step2_q3' => $form_state['values']['question-3'],
  ))
  ->condition('uid', $user->uid, '=')
  ->execute();
  
  $form_state['redirect'] = 'program-planning-tool';
}

function goodman_planning_tool_step3_form($form, $form_state) {
  global $user; //Get the current user.

  $query_select = db_select('gpt') //Query the database to see of the user has a record.
  ->fields('gpt')
  ->condition('uid', $user->uid, '=')
  ->execute()
  ->fetchAssoc();  
  
  if (!$query_select) { //insert record if one does not exist.
    $query_insert = db_insert('gpt')
    ->fields(array('uid'))
    ->values(array(
      'uid' => $user->uid )
    )
    ->execute();
  }

  $form = array(); //Build the form.
  
  $form['question-1'] = array(
    '#type' => 'select',
    '#title' => t('In order to fulfill the Initiative requirements, we must
      create/adapt this number of new programs:'),
    '#options' => array (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15),
    '#required' => TRUE,
    '#default_value' => $query_select['step3_q1'],
  );
  $form['question-2'] = array(
    '#type' => 'textarea',
    '#title' => t('We would like to create/adapt new programming in the
      following settings:'),
    '#required' => TRUE,
    '#default_value' => $query_select['step3_q2'],
  );
  $form['question-3'] = array(
    '#type' => 'textarea',
    '#title' => t('These are the challenges that I may face in implementing
      this many programs in these areas: '),
    '#required' => TRUE,
    '#default_value' => $query_select['step3_q3'],
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

function goodman_planning_tool_step3_form_submit($form, &$form_state) {
   global $user;
   
  //even though acheivement_unlocks checks, we need to check so that
  //storage is not invoked
  if (!achievements_unlocked_already('step-3', $user->uid)) {
    //assign the badge-specific points
    $current_count = achievements_storage_get('planning-tool', $user->uid) + 10;
    achievements_storage_set('planning-tool', $current_count, $user->uid);
    
    achievements_unlocked('step-3', $user->uid); //unlock the achivement
  }

  $query = db_update('gpt')
  ->fields(array(
    'step3_q1' => $form_state['values']['question-1'],
    'step3_q2' => $form_state['values']['question-2'],
    'step3_q3' => $form_state['values']['question-3'],
  ))
  ->condition('uid', $user->uid, '=')
  ->execute();
  
  $form_state['redirect'] = 'program-planning-tool';
}

function goodman_planning_tool_step4_form($form, $form_state) {
  global $user; //Get the current user.

  $query_select = db_select('gpt') //Query the database to see of the user has a record.
  ->fields('gpt')
  ->condition('uid', $user->uid, '=')
  ->execute()
  ->fetchAssoc();  
  
  if (!$query_select) { //insert record if one does not exist.
    $query_insert = db_insert('gpt')
    ->fields(array('uid'))
    ->values(array(
      'uid' => $user->uid )
    )
    ->execute();
  }

  $program_name = unserialize($query_select['step4_q1']);
  $program_setting = unserialize($query_select['step4_q2']);
  $program_adaptation = unserialize($query_select['step4_q3']);
  $program_subjects = unserialize($query_select['step4_q4']);
 
  $count_array = count($program_name);
  if ($count_array == 0) {
    $count_array++;
  }

  $form = array(); //Build the form.
  
  if (empty($form_state['num_names'])) {
    $form_state['num_names'] = $count_array;
  }

  // Build the number of name fieldsets indicated by $form_state['num_names']
  for ($i = 1; $i <= $form_state['num_names']; $i++) {
    $form['name'][$i] = array(
      '#type' => 'fieldset',
      '#title' => t('Program #@num', array('@num' => $i)),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
    );

    $form['name'][$i]['program_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Program Title'),
      '#description' => t("Enter a program name from the Goodman Database or one of your own."),
      '#size' => 100,
      '#maxlength' => 100,
      '#required' => TRUE,
      '#default_value' => $program_name[$i],
      );
    $form['name'][$i]['program_setting'] = array(
      '#type' => 'textfield',
      '#title' => t('Program Setting'),
      '#description' => t('Where at camp will this program take place (e.g. The Arts Center, The Lakefront, Bunks, etc.).'),
      '#size' => 75,
      '#maxlength' => 75,
      '#required' => TRUE,
      '#default_value' => $program_setting[$i],
    );
    $form['name'][$i]['program_adaptation'] = array(
      '#title' => t("Degree of Adaptation"),
      '#description' => t('How much will the program needed to be adapted to your camp from how it is written in the database.'),
      '#type' => 'select',
      '#options' => array (
      'large degree' => 'A large degree of adaptation',
      'some' => 'Some adaptation',
      'little' => 'Little adaptation',
      'none' => 'No adaptation',
      'not from database' => 'This program is not from the database'),
      '#required' => TRUE,
      '#default_value' => $program_adaptation[$i],      
    );
    $form['name'][$i]['program_subjects'] = array(
      '#type' => 'textfield',
      '#title' => t('Subjects'),
      '#description' => t("After adaptation, the program will cover these curricular subjects."),
      '#size' => 100,
      '#maxlength' => 150,
      '#required' => TRUE,
      '#default_value' => $program_subjects[$i],      
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  // Adds "Add another program" button
  $form['add_name'] = array(
    '#type' => 'submit',
    '#value' => t('Add another program'),
    '#submit' => array('goodman_planning_tool_add_name'),
  );

  // If we have more than one name, this button allows removal of the
  // last name.
  if ($form_state['num_names'] > 1) {
    $form['remove_name'] = array(
      '#type' => 'submit',
      '#value' => t('Remove last program'),
      '#submit' => array('goodman_planning_tool_remove_name'),
      
      // Since we are removing a name, don't validate until later.
      '#limit_validation_errors' => array(),
    );
  }
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  return $form;
}

function goodman_planning_tool_add_name($form, &$form_state) {
  // Everything in $form_state is persistent, so we'll just use
  // $form_state['add_name']
  $form_state['num_names']++;

  // Setting $form_state['rebuild'] = TRUE causes the form to be rebuilt again.
  $form_state['rebuild'] = TRUE;
}

function goodman_planning_tool_remove_name($form, &$form_state) {
  if ($form_state['num_names'] > 1) {
    $form_state['num_names']--;
  }

  // Setting $form_state['rebuild'] = TRUE causes the form to be rebuilt again.
  $form_state['rebuild'] = TRUE;
}

function goodman_planning_tool_step4_form_submit($form, &$form_state) {
   global $user;
   
  //even though acheivement_unlocks checks, we need to check so that
  //storage is not invoked
  if (!achievements_unlocked_already('step-4', $user->uid)) {
    //assign the badge-specific points
    $current_count = achievements_storage_get('planning-tool', $user->uid) + 10;
    achievements_storage_set('planning-tool', $current_count, $user->uid);
    
    achievements_unlocked('step-4', $user->uid); //unlock the achivement
  }
  //create arrays for the program fields
  $program_name = array();
  $program_setting = array();
  $program_adaptation = array();
  $program_subjects = array();
  
  for ($i = 1; $i <= $form_state['num_names']; $i++) {
    $program_name[$i] = $form_state['values'][$i]['program_name'];
    $program_setting[$i] = $form_state['values'][$i]['program_setting'];
    $program_adaptation[$i] = $form_state['values'][$i]['program_adaptation'];
    $program_subjects[$i] = $form_state['values'][$i]['program_subjects'];
  }
    
  $query = db_update('gpt')
  ->fields(array(
    'step4_q1' => serialize($program_name),
    'step4_q2' => serialize($program_setting),
    'step4_q3' => serialize($program_adaptation),
    'step4_q4' => serialize($program_subjects),    
  ))
  ->condition('uid', $user->uid, '=')
  ->execute();
  $form_state['redirect'] = 'program-planning-tool';
}
